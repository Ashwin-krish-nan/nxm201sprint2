Create two collections, "vendors" and "sales"
db.vendors.insertMany([{ "_id": 1, "name": "Azim", "age": 25, "city": "Bangalore" }, { "_id": 2, "name": "Mukesh", "age": 30, "city": "Mumbai" }, { "_id": 3, "name": "Gautam", "age": 35, "city": "Pune" }])

 db.Sales.insertMany([{ "_id": 1, "user_id": 1, "item": "books", "selling_price": 100, "profit": 8 }, { "_id": 2, "user_id": 1, "item": "pens", "selling_price": 50, "profit": 5 }, { "_id": 3, "user_id": 2, "item": "books", "selling_price": 150, "profit": 12 }, { "_id": 4, "user_id": 2, "item": "pens", "selling_price": 60, "profit": 6 }, { "_id": 5, "user_id": 3, "item": "books", "selling_price": 200, "profit": 16 }, { "_id": 6, "user_id": 3, "item": "pens", "selling_price": 70, "profit": 7 }])


 1.Create an index on the user_id field in the sales collection to improve the performance of your queries.
 Ans: db.sales.createIndex({user_id:1})

 2.Use the $lookup operator in an aggregation pipeline to join the vendors and sales collections, and return a new documents that contains the name and city of each vendor, along with their sales. The output should look like this:
 Ans:db.vendors.aggregate([{$lookup:{from:"Sales",localField:"_id",foreignField:"user_id",as:"sales"}},{$project:{_id:1,name:1,city:1,sales:{_id:1,item:1,profit:1}}}])


3.Use the $group operator in an aggregation pipeline to calculate the total number of sales and total profit for each user. The output should look like this

 Ans:db.Sales.aggregate([ { $lookup: { from: "vendors", localField: "user_id", foreignField: "_id", as: "user" } }, { $unwind: "$user" }, { $group: { _id: "$user_id", name: { $first: "$user.name" }, total_sales: { $sum: 1 }, total_profit: { $sum: "$profit" } } }])

 4.Use the $sort operator to sort the output documents by total profit in decreasing order. The output should look like this:
 Ans:db.Sales.aggregate([ { $lookup: { from: "vendors", localField: "user_id", foreignField: "_id", as: "user" } }, { $unwind: "$user" }, { $group: { _id: "$user_id", name: { $first: "$user.name" }, total_sales: { $sum: 1 }, total_profit: { $sum: "$profit" } } }, { $sort: { total_profit: -1 } }])
 

 5.Cross check the total_sales and total_profit, if it is correct, by adding more sales in the sales collection and running your aggregation pipeline again.
 ANS:db.vendors.aggregate([ { $lookup: { from: "Sales", localField: "_id", foreignField: "user_id", as: "sales" } }, { $project: { _id: 1, name: 1, city: 1, total_sales: { $size: "$sales" }, total_profit: { $sum: "$sales.profit" } } }, { $sort: { total_profit: -1 } }])